{"mappings":"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","sources":["sketches/ori/mySketch.js"],"sourcesContent":["var GreenColor, BlackColor;\nvar colorArray = [];\nvar CircleFills = [];\nvar CircleStroke = [];\n\nfunction setup() {\n\tcreateCanvas(468 * 2, 548 * 2);\n\tGreenColor = color(67, 146, 77);\n\tBlackColor = color(34, 31, 32);\n\tWhiteColor = color(250);\n\tcolorArray = [GreenColor, BlackColor];\n\tCircleFills = [GreenColor, BlackColor, WhiteColor];\n\tCircleStroke = [GreenColor, BlackColor, WhiteColor];\n\tbackground(250);\n}\n\nfunction drawShape1(rectColorIndex) {\n\tpush();\n\n\tscale(random(0.5, 0.55));\n\tlet angle = radians(randomGaussian(0, 360));\n\trotate(angle);\n\tvar index2;\n\t\n\tdo {\n\t\tindex2 = Math.floor(random(CircleFills.length));\n\t} while (index2 == rectColorIndex);\n\t\n\tfill(CircleFills[index2]);\n\tstroke(CircleFills[index2]);\n\n\tbeginShape();\n\tvertex(7.29, 0);\n\tvertex(81.47, 0);\n\tbezierVertex(86.01, 0, 90.28, 2.16, 92.98, 5.81);\n\tvertex(121.86, 44.95);\n\tbezierVertex(124.29, 48.24, 124.85, 52.660000000000004, 122.99, 56.31);\n\tbezierVertex(121.71, 58.830000000000005, 119.35, 61.02, 115.06, 61.11);\n\tbezierVertex(111.66, 61.18, 108.41, 59.74, 105.98, 57.36);\n\tvertex(94.72, 46.32);\n\tbezierVertex(92.6, 44.24, 89.74, 43.07, 86.77, 43.07);\n\tvertex(15.3, 43.07);\n\tbezierVertex(11.100000000000001, 43.07, 7.450000000000001, 40.17, 6.5, 36.08);\n\tvertex(0.19, 8.93);\n\tbezierVertex(-0.87, 4.37, 2.6, 0, 7.29, 0);\n\tendShape();\n\n\tpop();\n}\n\nfunction drawShape2(rectColorIndex, shiftX, shiftY) {\n  push();\n\n  scale(random(0.5, 0.6));\n  let angle = radians(randomGaussian(90, 120));\n  rotate(angle);\n  var index2;\n\n  do {\n    index2 = Math.floor(random(CircleFills.length));\n  } while (index2 == rectColorIndex);\n\n  fill(CircleFills[index2]);\n  stroke(CircleFills[index2]);\n\n  // Apply the shift in x and y directions\n  translate(shiftX, shiftY);\n\n  beginShape();\n \t\tbeginShape();\nvertex(26.93,196.25);\nbezierVertex(22.65,197.31,11.6,199.25,3.0700000000000003,193.74);\nbezierVertex(1.14,192.49,0,190.33,0,188.03);\nbezierVertex(0.05,167.04,1.73,50.62,32.12,3.54);\nbezierVertex(33.309999999999995,1.69,35.25,0.43999999999999995,37.43,0.10999999999999988);\nbezierVertex(40.41,-0.3300000000000001,43.96,0.2699999999999999,43.06,6.029999999999999);\nbezierVertex(41.57,15.5,24.750000000000004,142.18,28.6,193.93);\nbezierVertex(28.68,195.01000000000002,27.990000000000002,195.99,26.94,196.25);\nendShape();\n\n  pop();\n}\n\n\n\n\nfunction drawShape3(rectColorIndex) {\n\tpush();\n\n\tscale(random(0.6, 0.7));\n\tlet angle = radians(randomGaussian(40, 120));\n\trotate(angle);\n\tvar index2;\n\t\n\tdo {\n\t\tindex2 = Math.floor(random(CircleFills.length));\n\t} while (index2 == rectColorIndex);\n\t\n\tfill(CircleFills[index2]);\n\tstroke(CircleFills[index2]);\n\n\tbeginShape();\nvertex(11.11,0);\nvertex(77.43,0);\nbezierVertex(80.17,0,82.79,1.07,84.74000000000001,2.99);\nvertex(128.33,45.79);\nbezierVertex(130.89000000000001,48.31,132.10000000000002,52,131.21,55.48);\nbezierVertex(130.37,58.739999999999995,127.81,61.87,121.01,61.69);\nbezierVertex(118.37,61.62,115.86,60.48,114,58.599999999999994);\nvertex(81.22,25.51);\nbezierVertex(79.25,23.520000000000003,76.55,22.400000000000002,73.75,22.42);\nvertex(11.07,22.76);\nbezierVertex(8.86,22.770000000000003,6.680000000000001,22.110000000000003,4.91,20.790000000000003);\nbezierVertex(1.98,18.6,-0.93,15.07,0.28,9.29);\nbezierVertex(0.28,9.29,0.85,7.249999999999999,2.21,4.9799999999999995);\nbezierVertex(4.07,1.86,7.48,0,11.11,0);\nendShape();\n\n\tpop();\n}\n\nfunction drawShape(rectColorIndex) {\n\tlet randomShape = round(random(0, 4));\n\tif (randomShape == 0) {\n\t\tdrawShape1(rectColorIndex);\n\t} else if (randomShape == 1) {\n\t\tdrawShape3(rectColorIndex);\n\t} else if (randomShape == 2) {\n\t\tdrawShape2(rectColorIndex, randomGaussian(-40, 5), randomGaussian(-40, 5));\n\t} else if (randomShape == 3) {\n\t\tdrawShape3(rectColorIndex);\n\t} else if (randomShape == 4) {\n\t\tdrawShape1(rectColorIndex);\n\t}\n}\n\nfunction draw() {\n\trandomSeed(455); // Set a fixed seed value for the random number generator\n\tfor (var i = 0; i < 5; i++) {\n\t\tfor (var j = 0; j < 8; j++) {\n\t\t\t//Rectangle\n\t\t\tvar index = Math.floor(random(colorArray.length));\n\t\t\tfill(colorArray[index]);\n\t\t\tstroke(colorArray[index]);\n\t\t\tpush(); // Save the current transformation matrix\n\t\t\tvar xpos = (i * 98 + 40) * 2;\n\t\t\tvar ypos = (j * 66 + 40) * 2;\n\t\t\ttranslate(xpos, ypos); // Move to the rectangle's position\n\n\t\t\tlet shouldDrawShapeInBackground = random(0, 9) > 4;\n\t\t\tif (shouldDrawShapeInBackground == true) {\n\t\t\t\tdrawShape(index);\n\t\t\t\tdrawShape(index);\n\t\t\t}\n\n\t\t\tvar angle = radians(randomGaussian(0, 25)); // Choose a random angle between -30 and 30 degrees\n\t\t\tif (angle < -5 || angle > 5) { // If the angle is outside the range of -5 to 5 degrees\n\t\t\t\tvar absAngle = abs(angle);\n\t\t\t\tvar scale;\n\t\t\t\tif (angle < 0) { // If the angle is negative\n\t\t\t\t\tscale = map(absAngle, 5, 30, 0.25, 0.5); // Map the absolute value of the angle to a smaller scale\n\t\t\t\t} else { // If the angle is positive\n\t\t\t\t\tscale = map(absAngle, 5, 30, 0.5, 1); // Map the absolute value of the angle to a larger scale\n\t\t\t\t}\n\t\t\t\tscale(scale); // Apply the scaling transformation\n\t\t\t}\n\n\t\t\tvar rectWidth = 42 * 2; // Width of the rectangle\n\t\t\tvar rectHeight = 54 * 2; // Height of the rectangle\n\t\t\tvar margin = 15; // Margin between the rectangles\n\t\t\tvar diagonal = sqrt(pow(rectWidth, 2) + pow(rectHeight, 2)); // Length of the diagonal of the rectangle\n\t\t\tvar rectAngle = atan2(rectHeight, rectWidth); // Calculate the angle of the rectangle\n\t\t\tvar rotatedDiagonal = diagonal * cos(rectAngle - angle) * scale; // Calculate the length of the diagonal of the rotated rectangle\n\t\t\tvar rotatedWidth = rotatedDiagonal * cos(angle - rectAngle); // Calculate the width of the rotated rectangle\n\t\t\tvar rotatedHeight = rotatedDiagonal * sin(angle - rectAngle); // Calculate the height of the rotated rectangle\n\t\t\tvar dx = (rotatedWidth + margin) / 2; // Horizontal distance between the rectangles\n\t\t\tvar dy = (rotatedHeight + margin) / 2; // Vertical distance between the rectangles\n\t\t\ttranslate(dx, dy); // Move to the position of the rectangle\n\t\t\trotate(angle); // Rotate the rectangle on its own axis\n\t\t\trect(-rectWidth / 2, -rectHeight / 2, rectWidth, rectHeight, random(0, 60), random(0, 30), random(0, 30), random(0, 45));\n\n\t\t\tlet shouldDrawShapeInForeground = random(0, 9) > 3;\n\n\t\t\tif (shouldDrawShapeInBackground == false && shouldDrawShapeInForeground == true) {\n\t\t\t\tdrawShape(index);\n\t\t\t\tdrawShape(index);\n\t\t\t}\n\n\t\t\tpop(); // Restore the previous transformation matrix\n\n\t\t\t//Big Circle on rect\n\t\t\tvar indexCircleFill = Math.floor(random(CircleFills.length));\n\t\t\twhile (CircleFills[indexCircleFill] == colorArray[index]) {\n\t\t\t\tvar indexCircleFill = Math.floor(random(CircleFills.length));\n\t\t\t}\n\t\t\tfill(CircleFills[indexCircleFill]); //Fill color\n\n\t\t\tvar indexCircleStroke = Math.floor(random(CircleStroke.length));\n\t\t\twhile (CircleStroke[indexCircleStroke] == colorArray[index]) {\n\t\t\t\tvar indexCircleStroke = Math.floor(random(CircleStroke.length));\n\t\t\t}\n\t\t\tstroke(CircleStroke[indexCircleStroke]); //Stroke Color\n\t\t\tstrokeWeight(3.5);\n\n\t\t\tvar xpos_circle = randomGaussian(xpos - 5, 20); // Choose a random x position with a mean\n\t\t\tvar ypos_circle = randomGaussian(ypos, 22); // Choose a random y position with a mean\n\t\t\tcircle(xpos_circle, ypos_circle, 40);\n\n\n\t\t\t// Second Circle on rect\n\t\t\tvar indexCircleFill = Math.floor(random(CircleFills.length));\n\t\t\tfill(CircleFills[indexCircleFill]); // Fill color\n\n\n\t\t\tstrokeWeight(0);\n\t\t\t//\tvar xpos_circle2 = random(xpos-60,xpos+60);\n\t\t\t//\tvar ypos_circle2 = random (ypos-60, ypos+60);\n\t\t\tvar xpos_circle2 = randomGaussian(xpos, 20); // Choose a random x position with a mean\n\t\t\tvar ypos_circle2 = randomGaussian(ypos, 22);\n\t\t\tvar Circle2Radius = 25;\n\t\t\tvar d = dist(xpos_circle2, ypos_circle2, xpos_circle, ypos_circle);\n\t\t\tif (d < 32) {\n\t\t\t\tvar Circle2Radius = 0;\n\t\t\t}\n\t\t\tcircle(xpos_circle2, ypos_circle2, Circle2Radius);\n\t\t}\n\t}\n}"],"names":[],"version":3,"file":"ori.96c10a9b.js.map","sourceRoot":"/__parcel_source_root/"}