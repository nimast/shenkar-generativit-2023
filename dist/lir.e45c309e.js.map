{"mappings":"","sources":["sketches/lir/mySketch.js"],"sourcesContent":["let images = [];\nlet colors = [];\n\nfunction setup() {\n  createCanvas(400, 400);\n  // Create a file input element\n  let fileInput = createFileInput(handleFile, true);\n  fileInput.position(10, 10);\n}\n\nfunction handleFile(file) {\n  // Check if a file was selected\n  if (file.type === 'image') {\n    // Load the selected image\n    loadImage(file.data, (img) => {\n      // When the image is loaded, execute the following code\n      images.push(img);\n      // Process the images and create the pattern\n      processImages();\n    });\n  } else {\n    // If a non-image file was selected, show an error message\n    console.error('Please select an image file.');\n  }\n}\n\nfunction processImages() {\n  colors = [];\n\n  // Extract colors from each image\n  for (let i = 0; i < images.length; i++) {\n    let img = images[i];\n    img.loadPixels();\n    for (let x = 0; x < img.width; x++) {\n      for (let y = 0; y < img.height; y++) {\n        // Get the color at each pixel\n        let c = img.get(x, y);\n        // Add the color to the colors array\n        colors.push(c);\n      }\n    }\n  }\n\n  // Create the pattern\n  createPattern();\n}\n\nfunction createPattern() {\n  background(400);\n\n  // Set the pattern size and spacing\n  let patternSize = 100;\n  let spacing = 10;\n\n  // Calculate the number of columns and rows for the pattern\n  let columns = floor(width / (patternSize + spacing));\n  let rows = floor(height / (patternSize + spacing));\n\n  // Calculate the remaining space on the canvas\n  let remainingWidth = width % (patternSize + spacing);\n  let remainingHeight = height % (patternSize + spacing);\n\n  // Adjust the pattern size and spacing to cover the entire canvas\n  patternSize += remainingWidth / columns;\n  spacing += remainingHeight / rows;\n\n  // Iterate over the pattern\n  for (let x = 0; x < columns; x++) {\n    for (let y = 0; y < rows; y++) {\n      // Calculate the position for each rectangle\n      let rectX = x * (patternSize + spacing);\n      let rectY = y * (patternSize + spacing);\n\n      // Get a random color from the colors array\n      let randomColor = random(colors);\n      // Set the fill color to the random color\n      fill(randomColor);\n      // Draw a rectangle with the random color\n      rect(rectX, rectY, patternSize, patternSize);\n    }\n  }\n}\n"],"names":[],"version":3,"file":"lir.e45c309e.js.map"}